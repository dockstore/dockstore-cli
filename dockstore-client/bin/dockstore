#!/usr/bin/env bash
set -o errexit

# Ensure this file is executable via `chmod a+x dockstore`, then place it
# somewhere on your $PATH, like ~/bin. The rest of SeqWare will be
# installed upon first run into the ~/.dockstore directory.

# Encase variables inside brackets to prevent issues.
# $DOCKSTORE_VERSION would cause problems if $DOCKSTORE exists.  ${DOCKSTORE_VERSION} would be better.

DEFAULT_DOCKSTORE_VERSION="${project.version}"

export DOCKSTORE_VERSION="${DOCKSTORE_VERSION:-"$DEFAULT_DOCKSTORE_VERSION"}"

case ${DOCKSTORE_VERSION} in
    *SNAPSHOT) SNAPSHOT="YES" ;;
    *) SNAPSHOT="NO" ;;
esac

if [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]]; then
    delimiter=";"
else
    delimiter=":"
fi

if [[ "$OSTYPE" == "cygwin" ]]; then
    cygwin=true
else
    cygwin=false
fi

if [ `id -u` -eq 0 ] && [ "$DOCKSTORE_ROOT" = "" ]; then
    echo "WARNING: You're currently running as root; probably by accident."
    echo "Press control-C to abort or Enter to continue as root."
    echo "Set DOCKSTORE_ROOT to disable this warning."
    read _
fi

export DOCKSTORE_HOME="${DOCKSTORE_HOME:-"$HOME/.dockstore"}"
# export DOCKSTORE_HOME="${DOCKSTORE_HOME:-"$HOME/dockstore"}"

if ${cygwin}; then
    export DOCKSTORE_HOME=`cygpath -w "$DOCKSTORE_HOME"`
fi

export DOCKSTORE_JAR="$DOCKSTORE_HOME/self-installs/dockstore-client-$DOCKSTORE_VERSION.jar"
export DOCKSTORE_SETTINGS="${DOCKSTORE_SETTINGS:-"$DOCKSTORE_HOME/config"}"

# normalize $0 on certain BSDs
if [ "$(dirname "$0")" = "." ]; then
    if ! SCRIPT="$(which $(basename "$0"))"; then
         if [[ "$@" != *"--script"* ]]; then
            (>&2 echo "dockstore needs to be on PATH for certain commands to work (like --upgrade)")
        fi
    fi
else
    SCRIPT="$0"
fi

# resolve symlinks to the script itself portably
while [ -h "$SCRIPT" ] ; do
    ls=`ls -ld "$SCRIPT"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        SCRIPT="$link"
    else
        SCRIPT="$(dirname "$SCRIPT"$)/$link"
    fi
done

function make_native_path {
    # ensure we have native paths
    if ${cygwin} && [[ "$1"  == /* ]]; then
        echo -n "$(cygpath -wp "$1")"
    elif [[ "$OSTYPE" == "msys" && "$1"  == /* ]]; then
        echo -n "$(sh -c "(cd $1 2</dev/null && pwd -W) || echo $1 | sed 's/^\\/\([a-z]\)/\\1:/g'")"
    else
        echo -n "$1"
    fi
}

#  usage : add_path PATH_VAR [PATH]...
function add_path {
    local path_var="$1"
    shift
    while [ -n "$1" ];do
        # http://bashify.com/?Useful_Techniques:Indirect_Variables:Indirect_Assignment
    export ${path_var}="${!path_var}${delimiter}$(make_native_path "$1")"
    shift
    done
}

add_path CLASSPATH "$DOCKSTORE_JAR"

BOOTCLASSPATH="-Xbootclasspath/a:$DOCKSTORE_JAR"

if [ ! -r "$DOCKSTORE_JAR" -a "$1" != "self-install" -a "$1" != "self-check-install" -a "$1" != "init" ]; then
    "$0" self-install
    if [ $? != 0 ]; then
        exit $?
    fi
fi

if [[ "$@" == *"--config"* ]]; then
    # do not do init
    echo "Config provided" > /dev/null
elif [ ! -r "$DOCKSTORE_SETTINGS" -a "$1" != "self-install" -a "$1" != "self-check-install"  -a "$1" != "init" ]; then
    "$0" init
    exit $?
fi


if [ "$HTTP_CLIENT" = "" ]; then
    if type -p curl >/dev/null 2>&1; then
        if [ "$https_proxy" != "" ]; then
            CURL_PROXY="-x $https_proxy"
        fi
        HTTP_CLIENT="curl --retry 20 $CURL_PROXY -f -L -o"
    else
        HTTP_CLIENT="wget -O"
    fi
fi

# TODO: explain what to do when Java is missing
export JAVA_CMD="${JAVA_CMD:-"java"}"

# Support $JAVA_OPTS for backwards-compatibility.
export JVM_OPTS="${JVM_OPTS:-"$JAVA_OPTS"}"

# Handle jline issue with cygwin not propagating OSTYPE through java subprocesses: https://github.com/jline/jline2/issues/62
cygterm=false
if ${cygwin}; then
    case "$TERM" in
        rxvt* | xterm* | vt*) cygterm=true ;;
    esac
fi

if ${cygterm}; then
    JVM_OPTS="$JVM_OPTS -Djline.terminal=jline.UnixTerminal"
    stty -icanon min 1 -echo > /dev/null 2>&1
fi

function download_failed_message {
    echo "Failed to download $1"
    echo "It's possible your HTTP client's certificate store does not have the"
    echo "correct certificate authority needed. This is often caused by an"
    echo "out-of-date version of libssl. Either upgrade it or set HTTP_CLIENT"
    echo "to turn off certificate checks:"
    echo "  export HTTP_CLIENT=\"wget --no-check-certificate -O\" # or"
    echo "  export HTTP_CLIENT=\"curl --insecure -f -L -o\""
    echo "It's also possible that you're behind a firewall haven't yet"
    echo "set HTTP_PROXY and HTTPS_PROXY."
}


if [ "$1" = "self-install" ]; then
    if [ -r "$DOCKSTORE_JAR" ]; then
        echo "The self-install jar already exists at $DOCKSTORE_JAR."
        echo "If you wish to re-download, delete it and rerun \"$0 self-install\"."
        exit 0
    fi

    (>&2 echo "Downloading Dockstore to $DOCKSTORE_JAR now...")
    mkdir -p "$(dirname "$DOCKSTORE_JAR")"
    
    if [ ${SNAPSHOT} = "YES" ]; then
        DOCKSTORE_URL="file://$HOME/.m2/repository/io/dockstore/dockstore-client/$DOCKSTORE_VERSION/dockstore-client-$DOCKSTORE_VERSION-shaded.jar"
    elif [ -r "/$HOME/.m2/repository/io/dockstore/dockstore-client/$DOCKSTORE_VERSION/dockstore-client-$DOCKSTORE_VERSION-shaded.jar" ]; then
    # for testing, if you have a local release version, just use it
        DOCKSTORE_URL="file://$HOME/.m2/repository/io/dockstore/dockstore-client/$DOCKSTORE_VERSION/dockstore-client-$DOCKSTORE_VERSION-shaded.jar"
    else
        # DOCKSTORE_URL="https://artifacts.oicr.on.ca/artifactory/collab-release/io/dockstore/dockstore-client/$DOCKSTORE_VERSION/dockstore-client-$DOCKSTORE_VERSION-shaded.jar"
        DOCKSTORE_URL="https://github.com/dockstore/dockstore-cli/releases/download/$DOCKSTORE_VERSION/dockstore-client-$DOCKSTORE_VERSION-shaded.jar"
    fi

    (>&2 echo "$DOCKSTORE_URL")

    ${HTTP_CLIENT} "$DOCKSTORE_JAR.pending" "$DOCKSTORE_URL"
    if [ $? == 0 ]; then
        # TODO: checksum
        mv -f "$DOCKSTORE_JAR.pending" "$DOCKSTORE_JAR"
    else
        rm "$DOCKSTORE_JAR.pending" 2> /dev/null
        download_failed_message "$DOCKSTORE_URL"
        exit 1
    fi
elif [ "$1" = "init" ]; then
    if [ -r "$DOCKSTORE_SETTINGS" ]; then
        echo "The Dockstore settings file already exists at $DOCKSTORE_SETTINGS."
        echo "If you wish to re-initialize, delete it and rerun \"$0 init\"."
        exit 1
    fi

    echo "DOCKSTORE COMMAND LINE"
    echo "----------------------"
    echo "Welcome to the command line tool for the Dockstore.Â  This bootstrap process will"
    echo "ask you a few questions, download, and configure the command line tool."
    echo
    echo
    echo "Have you setup an account at http://www.dockstore.org/?"
    echo -n "Y/N> "

    read HASACCOUNT

    if [ "$HASACCOUNT" = "Y" ] || [ "$HASACCOUNT" = "y" ]; then
        mkdir -p "$(dirname "$DOCKSTORE_SETTINGS")"
        touch ${DOCKSTORE_SETTINGS}
        chmod 600 ${DOCKSTORE_SETTINGS}

        echo

        echo "What is your token?"
        read TOKEN
        echo "token: $TOKEN" >> ${DOCKSTORE_SETTINGS}

        echo "What is your server-url?"
        read SERVER_URL
        echo "server-url: $SERVER_URL" >> ${DOCKSTORE_SETTINGS}
        
        echo    
        echo "Created Dockstore settings file at $DOCKSTORE_SETTINGS"
        echo
        echo "Downloading default file-provisioning plugins"
        ${JAVA_CMD} ${DOCKSTORE_JVM_OPTS} io.dockstore.client.cli.Client plugin download
        echo "Dockstore is ready to use!"
    else
        echo "Please setup an account at http://www.dockstore.org/"
    fi
else
    # from https://stackoverflow.com/questions/7334754/correct-way-to-check-java-version-from-bash-script
    if type -p java > /dev/null; then
      _java=java
    else
      echo "Java was not installed or is not on your PATH."
      exit -100;
    fi

# does not work with OpenJDK 10 on Ubuntu. format looks very different
#    if [[ "$_java" ]]; then
#      version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
#      if [[ "$version" < "1.8" ]]; then
#        echo "Dockstore requires Java version 1.8 and above."
#        exit -100;
#      fi
#    fi

    ${JAVA_CMD} ${DOCKSTORE_JVM_OPTS} io.dockstore.client.cli.Client "$@"
    
    EXIT_CODE=$?

    if ${cygterm} ; then
        stty icanon echo > /dev/null 2>&1
    fi
    
    exit $EXIT_CODE
fi
