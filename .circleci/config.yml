version: 2.1
parameters:
  java-tag:
    type: string
    default: "11.0.11"
orbs:
  build-tools: circleci/build-tools@2.7.0
executors:
  unit_tests_executor:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>

  machine_integration_test_exec:
    machine: # run the steps with Ubuntu VM
      image: ubuntu-2004:202104-01
    environment:
      PGHOST: 127.0.0.1
    resource_class: medium

common_filters: &common_filters
  filters:
    tags:
      only: /.*/
    branches:
      ignore:
        - gh-pages

workflows:
  version: 2
  everything:
    jobs:
      - build:
          <<: *common_filters

      - unit-tests:
          <<: *common_filters
          requires:
            - build

      - integration-tests:
          matrix:
            parameters:
              testing_profile: ["non-confidential-tests",
              "confidential-workflow-tests",
              "confidential-tool-tests",
              "singularity-tests"]
          <<: *common_filters
          requires:
            - build


jobs:
  unit-tests:
    executor: unit_tests_executor
    environment:
      TESTING_PROFILE: unit-tests
      MAVEN_GOAL: test
    steps:
      - setup_for_unit_tests
      - run_tests
      - save_test_results
      - send_coverage

  integration-tests:
    parameters:
      testing_profile:
        type: string
    # We must use machine executor instead of Docker executor and setup_remote_docker
    # https://circleci.com/docs/2.0/executor-intro/#machine
    # perhaps because cwltool cannot mount a volume from our job space
    # into CircleCI remote Docker
    # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
    executor: machine_integration_test_exec
    environment:
      TESTING_PROFILE: << parameters.testing_profile >>
      MAVEN_GOAL: verify
    steps:
      - setup_for_integration_tests
      - run_tests
      - save_test_results
      - send_coverage




  build:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
        environment:
          # Java can read cgroup. Sadly the cgroup in
          # CircleCI is wrong. Have to manually set. Nothing to do with surefire
          # plugin, it has its own JVM. The two of these must add up to a bit less than 4GB.
          JAVA_TOOL_OPTIONS: -Xmx512m
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dockstore-cli-java-{{ checksum "pom.xml" }}
      - install_yq
      - install-git-secrets
      - install_confidential_test_data
      - run:
          name: build
          command: mvn -B clean install -DskipTests

        # Running scan must occur after build
      - run_git_secrets_scan
      - check_license_file
      - check_pom_files
      - clean_and_save_cache
      - persist_to_workspace:
          root: .
          paths:
            - .


commands:
  setup_machine:
    steps:
      - run: # Useful for verifying default versions on machine image
          name: Java/Maven/Python versions
          command: |
            java -version
            mvn -v
            python3 -V
      - run:
          name: Docker-Compose
          command: docker-compose up -d

  install_confidential_test_data:
    steps:
      - run:
          name: decrypt and expand confidential test data
          command: |
            sudo apt install openssl -y
            bash scripts/decrypt.sh

  send_coverage:
    steps:
      - run:
          name: send coverage
          command: bash <(curl -s https://codecov.io/bash) -F ${TESTING_PROFILE//-} || echo "Codecov did not collect coverage reports"

  install_dockerize:
    steps:
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

  wait_for_db:
    steps:
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

  wait_for_elastic_search:
    steps:
      - run:
          name: Wait for ES
          command: |
            wget --output-document /dev/null --waitretry=5 --tries=10 --retry-connrefused localhost:9200 || true

  check_license_file:
    steps:
      - run:
          name: check generated THIRD-PARTY-LICENCES.txt matches checked-in file
          command: |
            scripts/check-licenses.sh
          environment:
              TESTING_PROFILE: automated-review

  check_pom_files:
    steps:
      - run:
          name: check generated flattened POMs match checked-in files.
          command: |
            # need better solution, but leaving this as-is fouls up the release since the Maven release plugin doesn't know about the flattened poms
            if [[ -z "${CIRCLE_TAG}" ]]; then
              scripts/check_poms.sh
            fi
          environment:
            TESTING_PROFILE: automated-review

  run_git_secrets_scan:
    steps:
      - run:
          name: Run git-secrets scan on dockstore repository
          # Needs to be after a build so that the correct configuration is set
          # by the exec-maven plugin
          command: |
            git secrets --scan

  clean_and_save_cache:
    steps:
      - run:
          name: clean the cache
          command: |
            rm -rf ~/.m2/repository/io/dockstore
            rm -rf ~/.m2/repository/.cache/download-maven-plugin directory
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: dockstore-cli-java-{{ checksum "pom.xml" }}

  install_yq:
    steps:
      - run:
          name: Install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/3.3.2/yq_linux_amd64
            chmod a+x yq_linux_amd64
            sudo mv yq_linux_amd64 /usr/bin/yq

  install-git-secrets:
    steps:
      - run:
          name: Install git-secrets
          command: |
            wget --no-verbose -O git-secrets-1.3.0.tar.gz https://github.com/awslabs/git-secrets/archive/1.3.0.tar.gz
            tar -zxf git-secrets-1.3.0.tar.gz
            cd git-secrets-1.3.0
            sudo make install

  setup_postgres:
    steps:
      - run:
          name: setup postgres user and DB
          command: |
            psql -c "create user dockstore with password 'dockstore' createdb;" -U postgres
            psql -c 'create database webservice_test with owner = dockstore;' -U postgres
            psql -c "ALTER USER dockstore WITH superuser;" -U postgres

  install_postgres_sql_client:
    steps:
     - run:
         name: Install postgresql client
         command: |
           sudo rm -rf /var/lib/apt/lists/*
           # heroku.com is not updating their keys
           # https://github.com/heroku/cli/issues/1464
           curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -
           sudo apt update
           # NOTE: this may be installing latest client; perhaps should
           # specify version
           sudo apt install -y postgresql-client

  setup_for_unit_tests:
    steps:
      - get_workspace_and_dependencies
      - install_yq
      - install-git-secrets

  setup_for_integration_tests:
    steps:
      - get_workspace_and_dependencies
      - setup_machine
      - setup_for_tests
      - wait_for_elastic_search
      - setup_integration_test_dependencies

  get_workspace_and_dependencies:
    steps:
      - attach_workspace:
          at: .
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dockstore-java-{{ checksum "pom.xml" }}
      - restore_cache:
          key: dockstore-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CACHE_SEGMENTED_VERSION }}-segmented

  setup_for_tests:
    steps:
      - install_yq
      - install-git-secrets
      - install_postgres_sql_client
      - setup_postgres
      - install_dockerize
      - wait_for_db

  setup_integration_test_dependencies:
    steps:
      - run:
          name: install pip
          command: |
            sudo apt update
            sudo apt install python3-distutils python3-dev
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py
            # For debug purposes, a python3 version was installed in the image, pip is untagged
            python3 --version
            pip3 --version
      # https://circleci.com/docs/2.0/env-vars/#using-parameters-and-bash-environment
      - run:
          name: Setup pip dependencies environment variables
          command: |
            # install-tests.sh installs cwltool at /home/circleci/.local/bin
            # on the executor machine
            # (called from setup_integration_test_dependencies)
            # It may be advisible to change this install location
            # but at this time how to do that is unknown
            # so we have to add /home/circleci/.local/bin to the PATH
            export CWLTOOL_PATH=${HOME}/.local/bin
            echo "export CWLTOOL_PATH=${HOME}/.local/bin" >> $BASH_ENV

            export GO_PATH=/usr/local
            echo "export GO_PATH=/usr/local" >> $BASH_ENV
            export SINGULARITY_PATH=${HOME}/go
            echo "export SINGULARITY_PATH=${HOME}/go" >> $BASH_ENV

            echo "export PATH=${CWLTOOL_PATH}:${GO_PATH}/go/bin:${PATH}:${SINGULARITY_PATH}/bin" >> $BASH_ENV
      - run:
          name: install pip dependencies
          command: scripts/install-tests.sh
      - install_confidential_test_data

  run_tests:
    steps:
      - run:
          name: run tests
          command: mvn -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate $MAVEN_GOAL -P$TESTING_PROFILE,coverage -ntp

  save_test_results:
    steps:
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/.*-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - save_cache:
          key: dockstore-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CACHE_SEGMENTED_VERSION }}-segmented
          paths:
            - /tmp/dockstore-web-cache
      - store_artifacts:
          path: /tmp/dockstore-web-cache.misses.log

