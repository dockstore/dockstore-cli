version: 2.1
parameters:
  java-tag:
    type: string
    default: "17.0.3"
  run_against_develop_core:
    type: boolean
    default: false

orbs:
  build-tools: circleci/build-tools@2.7.0
executors:
  unit_tests_executor:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>

  machine_integration_test_exec:
    machine: # run the steps with Ubuntu VM
      image: ubuntu-2204:2023.10.1
    environment:
      PGHOST: 127.0.0.1
    resource_class: medium

  toil_wes_test_executor:
    machine: # run the steps with Ubuntu VM
      image: ubuntu-2204:2023.10.1
    resource_class: medium

common_filters: &common_filters
  filters:
    tags:
      only: /.*/
    branches:
      ignore:
        - gh-pages

common_jobs: &common_jobs
    jobs:
        # find-develop-snapshot job is run for both "everything" and "nightly" builds even though it's only needed for nightly.
        # See https://github.com/dockstore/dockstore-cli/pull/268#discussion_r1419429151
        - find-develop-snapshot
        - build:
            <<: *common_filters
            requires:
              - find-develop-snapshot
        - unit-tests:
            <<: *common_filters
            requires:
              - build
        - integration-tests:
            matrix:
              parameters:
                testing_profile: [ "singularity-tests", "bitbucket-tests" ]
            <<: *common_filters
            requires:
              - build
        - non-confidential-tests:
            <<: *common_filters
            requires:
              - build
        - confidential-workflow-tests:
            <<: *common_filters
            requires:
              - build
        - confidential-tool-tests:
            <<: *common_filters
            requires:
              - build
        - wes-toil-test:
            <<: *common_filters
            requires:
              - build
        - sonar-cloud:
            <<: *common_filters
            requires:
              - unit-tests
              - integration-tests
              - non-confidential-tests
              - confidential-workflow-tests
              - confidential-tool-tests
              - wes-toil-test
            context:
              - sonarcloud

workflows:
  version: 2

  everything:
    when:
      not: << pipeline.parameters.run_against_develop_core >>
    <<: *common_jobs

  nightly:
    when: << pipeline.parameters.run_against_develop_core >>
    <<: *common_jobs

jobs:
  # If the parameter "run_against_develop_core" is true, looks for the latest snapshot in dockstore/dockstore and
  # and sets the environment variable CORE_VERSION_OVERRIDE, saving it to the workspace
  find-develop-snapshot:
    executor: unit_tests_executor
    steps:
      # Need to have at least one run step at the same level as the when, or config.yml schema validation fails
      - run: echo "Checking whether to fetch latest core version"
      - when:
          condition: << pipeline.parameters.run_against_develop_core >>
          steps:
            - run:
                name: findDevelopSnapshot
                command: |
                  echo 'export LATEST_VERSION='$(curl "https://artifacts.oicr.on.ca/artifactory/api/search/latestVersion?g=io.dockstore&a=dockstore&repos=collab-snapshot&v=*") >> $BASH_ENV
            - run:
                name: createCoreVersionParam
                command: |
                  echo 'export CORE_VERSION_OVERRIDE'="-Ddockstore-core.version=$LATEST_VERSION" >> $BASH_ENV
            - run:
                name: saveEnv
                command: |
                  cp $BASH_ENV bash.env
            - persist_to_workspace:
                root: .
                paths:
                  bash.env

  unit-tests:
    executor: unit_tests_executor
    environment:
      TESTING_PROFILE: unit-tests
      MAVEN_GOAL: test
    steps:
      - restore_bash_env
      - setup_for_unit_tests
      - run_tests
      - save_test_results
      - send_coverage
      - persist_coverage

  non-confidential-tests:
    executor: machine_integration_test_exec
    parallelism: 2
    environment:
      TESTING_PROFILE: non-confidential-tests
      MAVEN_GOAL: verify
    steps:
    - setup_and_run_integration_tests

  confidential-workflow-tests:
    executor: machine_integration_test_exec
    parallelism: 3
    environment:
      TESTING_PROFILE: confidential-workflow-tests
      MAVEN_GOAL: verify
    steps:
      - setup_and_run_integration_tests

  confidential-tool-tests:
    executor: machine_integration_test_exec
    parallelism: 3
    environment:
      TESTING_PROFILE: confidential-tool-tests
      MAVEN_GOAL: verify
    steps:
      - setup_and_run_integration_tests


  integration-tests:
    parameters:
      testing_profile:
        type: string
    # We must use machine executor instead of Docker executor and setup_remote_docker
    # https://circleci.com/docs/2.0/executor-intro/#machine
    # perhaps because cwltool cannot mount a volume from our job space
    # into CircleCI remote Docker
    # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
    executor: machine_integration_test_exec
    environment:
      TESTING_PROFILE: << parameters.testing_profile >>
      MAVEN_GOAL: verify
    steps:
      - setup_and_run_integration_tests

  wes-toil-test:
    executor: toil_wes_test_executor
    steps:
      - get_workspace_and_dependencies
      - setup_for_unit_tests
      - setup_toil_wes_server
      - run_toil_wes_tests
      - persist_coverage
      - send_coverage


  build:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
        environment:
          # Java can read cgroup. Sadly the cgroup in
          # CircleCI is wrong. Have to manually set. Nothing to do with surefire
          # plugin, it has its own JVM. The two of these must add up to a bit less than 4GB.
          JAVA_TOOL_OPTIONS: -Xmx512m
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache:
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            # Find a cache corresponding to this specific licenses file checksum
            # when this file is changed, this key will fail
            - dockstore-cli-java-{{ checksum "THIRD-PARTY-LICENSES.txt" }}
            # Find the most recent cache used from any branch
            - dockstore-cli-java-
      - install_yq
      - install-git-secrets
      - install_confidential_test_data
      - restore_bash_env
      - run:
          name: build
          command: |
            ./mvnw -B clean install -DskipTests $CORE_VERSION_OVERRIDE

      - run:
          name: Check imports are sorted
          command: !
            if [[ $(git diff --name-only | grep "\.java$") != '' ]]; then
              echo "At least one Java file didn't have its imports sorted"
              git diff --stat
              exit 1
            fi


        # Running scan must occur after build
      - run_git_secrets_scan
      - check_pom_files
      - clean_and_save_cache
      - run:
          name: Generate test lists
          command: bash scripts/generate-test-list.sh
      - store_artifacts:
          path: temp/test-list
      - persist_to_workspace:
          root: .
          paths:
            - .
  sonar-cloud:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: dockstore-cli-java-{{ checksum "THIRD-PARTY-LICENSES.txt" }}
      - install-git-secrets
      - run:
          name: build
          command: mvn clean install -DskipTests
      - run:
          name: SonarCloud scan - coverage
          command: mvn -Dsonar.coverage.jacoco.xmlReportPaths=../coverage/* sonar:sonar
      - store_artifacts:
          path: misses

commands:
  setup_machine:
    steps:
      - run: # Useful for verifying default versions on machine image
          name: Java/Maven/Python versions
          command: |
            java -version
            mvn -v
            python3 -V
      - run:
          name: Docker-Compose
          command: docker compose up -d

  install_confidential_test_data:
    steps:
      - run:
          name: decrypt and expand confidential test data
          command: |
            sudo NEEDRESTART_MODE=a apt install openssl
            bash scripts/decrypt.sh

  restore_bash_env:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Restore bash environment from bash.env
          command: !
            cat bash.env >> $BASH_ENV || true

  send_coverage:
    steps:
      - run:
          name: send coverage
          command: bash <(curl -s https://codecov.io/bash) -F ${TESTING_PROFILE//-} || echo "Codecov did not collect coverage reports"

  install_dockerize:
    steps:
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

  wait_for_db:
    steps:
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

  wait_for_elastic_search:
    steps:
      - run:
          name: Wait for ES
          command: |
            wget --output-document /dev/null --waitretry=5 --tries=10 --retry-connrefused localhost:9200 || true


  check_pom_files:
    steps:
      - run:
          name: check generated flattened POMs match checked-in files.
          command: |
            # need better solution, but leaving this as-is fouls up the release since the Maven release plugin doesn't know about the flattened poms
            if [[ -z "${CIRCLE_TAG}" ]]; then
              scripts/check_poms.sh
            fi
          environment:
            TESTING_PROFILE: automated-review

  run_git_secrets_scan:
    steps:
      - run:
          name: Run git-secrets scan on dockstore repository
          # Needs to be after a build so that the correct configuration is set
          # by the exec-maven plugin
          command: |
            git secrets --scan

  clean_and_save_cache:
    steps:
      - run:
          name: clean the cache
          command: |
            rm -rf ~/.m2/repository/io/dockstore
            rm -rf ~/.m2/repository/.cache/download-maven-plugin directory
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: dockstore-cli-java-{{ checksum "THIRD-PARTY-LICENSES.txt" }}

  install_yq:
    steps:
      - run:
          name: Install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/3.3.2/yq_linux_amd64
            chmod a+x yq_linux_amd64
            sudo mv yq_linux_amd64 /usr/bin/yq

  install-git-secrets:
    steps:
      - run:
          name: Install git-secrets
          command: |
            wget --no-verbose -O git-secrets-1.3.0.tar.gz https://github.com/awslabs/git-secrets/archive/1.3.0.tar.gz
            tar -zxf git-secrets-1.3.0.tar.gz
            cd git-secrets-1.3.0
            sudo make install

  setup_postgres:
    steps:
      - run:
          name: setup postgres user and DB
          command: |
            psql -c "create user dockstore with password 'dockstore' createdb;" -U postgres
            psql -c 'create database webservice_test with owner = dockstore;' -U postgres
            psql -c "ALTER USER dockstore WITH superuser;" -U postgres

  install_postgres_sql_client:
    steps:
     - run:
         name: Install postgresql client
         command: |
           # https://discuss.circleci.com/t/heroku-gpg-issues-in-ubuntu-images/43834/3
           sudo rm -Rf /etc/apt/sources.list.d/heroku.list
           sudo apt update
           sudo apt install -y postgresql-client

  setup_for_unit_tests:
    steps:
      - get_workspace_and_dependencies
      - install_yq
      - install-git-secrets

  setup_for_integration_tests:
    steps:
      - get_workspace_and_dependencies
      - setup_machine
      - setup_for_tests
      - wait_for_elastic_search
      - setup_integration_test_dependencies

  get_workspace_and_dependencies:
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific licenses file checksum
            # when this file is changed, this key will fail
            - dockstore-cli-java-{{ checksum "THIRD-PARTY-LICENSES.txt" }}
            # Find the most recent cache used from any branch
            - dockstore-cli-java-
      - run:
          name: identify tests to run
          command: |
            if [ $CIRCLE_NODE_TOTAL != 1 ] 
            then
              TESTS_TO_RUN=$(cat temp/test-list/IT/all.txt | circleci tests split --split-by=timings --time-default=0.1s | tr '\n' ',')
            else 
              TESTS_TO_RUN=$(cat temp/test-list/IT/all.txt | tr '\n' ',')
            fi
            echo $TESTS_TO_RUN | tee /tmp/tests-to-run.txt
          # The piping grep command is a temporary fix to this issue https://github.com/liquibase/liquibase/issues/2396
      - restore_cache:
          keys:
            - dockstore-cli-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/tests-to-run.txt" }}-{{ .Branch }}
            - dockstore-cli-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/tests-to-run.txt" }}-
            - dockstore-cli-web-cache-{{ .Environment.CIRCLE_JOB }}-
            - dockstore-cli-web-cache-

  setup_for_tests:
    steps:
      - install_yq
      - install-git-secrets
      - install_postgres_sql_client
      - setup_postgres
      - install_dockerize
      - wait_for_db

  setup_integration_test_dependencies:
    steps:
      - run:
          name: install pip
          command: |
            sudo apt update
            sudo apt install python3-distutils python3-dev
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py
            # For debug purposes, a python3 version was installed in the image, pip is untagged
            python3 --version
            pip3 --version
      # https://circleci.com/docs/2.0/env-vars/#using-parameters-and-bash-environment
      - run:
          name: Setup pip dependencies environment variables
          command: |
            # install-tests.sh installs cwltool at /home/circleci/.local/bin
            # on the executor machine
            # (called from setup_integration_test_dependencies)
            # It may be advisible to change this install location
            # but at this time how to do that is unknown
            # so we have to add /home/circleci/.local/bin to the PATH
            export CWLTOOL_PATH=${HOME}/.local/bin
            echo 'export CWLTOOL_PATH=${HOME}/.local/bin' >> $BASH_ENV

            export GO_PATH=/usr/local
            echo 'export GO_PATH=/usr/local' >> $BASH_ENV
            export SINGULARITY_PATH=${HOME}/go
            echo 'export SINGULARITY_PATH=${HOME}/go' >> $BASH_ENV

            echo 'export PATH=${CWLTOOL_PATH}:${GO_PATH}/go/bin:${PATH}:${SINGULARITY_PATH}/bin' >> $BASH_ENV
      - run:
          name: install pip dependencies
          command: scripts/install-tests.sh
      - install_confidential_test_data

  run_tests:
    steps:
      - run:
          name: run tests
          command: |  
            if [ $CIRCLE_NODE_TOTAL != 1 ]
            then
              ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -Dit.test=`cat /tmp/tests-to-run.txt` -DfailIfNoTests=false \
              -P$TESTING_PROFILE,coverage $CORE_VERSION_OVERRIDE -ntp | grep  -v "^Running Changeset:"
            else
              ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -P$TESTING_PROFILE,coverage $CORE_VERSION_OVERRIDE -ntp | grep  -v "^Running Changeset:"
            fi
          # The piping grep command is a temporary fix to this issue https://github.com/liquibase/liquibase/issues/2396
  save_test_results:
    steps:
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/.*-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - save_cache:
          key: dockstore-cli-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/tests-to-run.txt" }}-{{ .Branch }}
          paths:
            - /tmp/dockstore-web-cache
      - run:
          name: Move cache miss log
          command: |
            mkdir misses
            touch /tmp/dockstore-web-cache.misses.log
            cp /tmp/dockstore-web-cache.misses.log misses/dockstore-web-cache.misses-${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.log
      - persist_to_workspace:
          root: .
          paths:
            - misses

  setup_toil_wes_server:
    steps:
      - run:
          name: create required directories to mount. Requires execute permissions.
          command: |
            sudo mkdir /var/lib/toil && sudo chmod a+rwx -R /var/lib/toil

            sudo mkdir /var/lib/cwl && sudo chmod a+rwx -R /var/lib/toil

            sudo mkdir /tmp/toil-workflows && sudo chmod a+rwx -R /var/lib/toil
      - run:
          name: execute toil docker compose
          command: docker-compose up -d
          working_directory: toil/

  run_toil_wes_tests:
    steps:
      - run:
          name: ensure artifacts are installed
          command: ./mvnw clean install -DskipTests $CORE_VERSION_OVERRIDE
      - run:
          name: run toil tests
          command: ./mvnw -P wes-integration-tests verify $CORE_VERSION_OVERRIDE


  setup_and_run_integration_tests:
    steps:
      - setup_for_integration_tests
      - restore_bash_env
      - run_tests
      - save_test_results
      - send_coverage
      - persist_coverage

  persist_coverage:
    steps:
      - run:
          name: Rename and move coverage reports
          command: |
            mkdir coverage
            cp ./dockstore-cli-reports/target/site/jacoco-aggregate/jacoco.xml coverage/${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.xml
      - persist_to_workspace:
          root: .
          paths:
            - coverage
